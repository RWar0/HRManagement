<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:vm="clr-namespace:HRManagement.ViewModels"
                    xmlns:vmm="clr-namespace:HRManagement.ViewModels.Many"
                    xmlns:vms="clr-namespace:HRManagement.ViewModels.Single"
                    xmlns:vw="clr-namespace:HRManagement.Views"
                    xmlns:vwm="clr-namespace:HRManagement.Views.Many"
                    xmlns:vws="clr-namespace:HRManagement.Views.Single">

    <DataTemplate DataType="{x:Type vmm:PositionsViewModel}">
        <vwm:PositionsView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmm:PositionsWithCallbackViewModel}">
        <vwm:PositionsView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vms:PositionViewModel}">
        <vws:PositionView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmm:EmployeesViewModel}">
        <vwm:EmployeesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmm:EmployeesWithCallbackViewModel}">
        <vwm:EmployeesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmm:AvailableEmployeesWithCallbackViewModel}">
        <vwm:EmployeesView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmm:EmployeesOnLeaveViewModel}">
        <vwm:EmployeesOnLeaveView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vms:EmployeeViewModel}">
        <vws:EmployeeView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmm:LeaveTypesViewModel}">
        <vwm:LeaveTypesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmm:LeaveTypesWithCallbackViewModel}">
        <vwm:LeaveTypesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:LeaveTypeViewModel}">
        <vws:LeaveTypeView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmm:LeaveStatusesViewModel}">
        <vwm:LeaveStatusesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmm:LeaveStatusesWithCallbackViewModel}">
        <vwm:LeaveStatusesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:LeaveStatusViewModel}">
        <vws:LeaveStatusView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmm:LeavesViewModel}">
        <vwm:LeavesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:LeaveViewModel}">
        <vws:LeaveView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmm:SkillsViewModel}">
        <vwm:SklillsView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmm:SkillsWithCallbackViewModel}">
        <vwm:SklillsView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:SkillViewModel}">
        <vws:SkillView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmm:TrainingsViewModel}">
        <vwm:TrainingsView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmm:TrainingsWithCallbackViewModel}">
        <vwm:TrainingsView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:TrainingViewModel}">
        <vws:TrainingView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vmm:PersonalDatasViewModel}">
        <vwm:PersonalDatasView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:PersonalDataViewModel}">
        <vws:PersonalDataView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmm:AdressesViewModel}">
        <vwm:AdressesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:AdressViewModel}">
        <vws:AdressView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmm:SalariesViewModel}">
        <vwm:SalariesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:SalaryViewModel}">
        <vws:SalaryView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:SalaryCalculatorViewModel}">
        <vws:SalaryCalculatorView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmm:PromotionsViewModel}">
        <vwm:PromotionsView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:PromotionViewModel}">
        <vws:PromotionView/>
    </DataTemplate>
    
    <DataTemplate DataType="{x:Type vmm:BonusesViewModel}">
        <vwm:BonusesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmm:BonusesWithCallbackViewModel}">
        <vwm:BonusesView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:BonusViewModel}">
        <vws:BonusView/>
    </DataTemplate>

    <DataTemplate DataType="{x:Type vmm:CareersViewModel}">
        <vwm:CareersView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vmm:CareersWithCallbackViewModel}">
        <vwm:CareersView/>
    </DataTemplate>
    <DataTemplate DataType="{x:Type vms:CareerViewModel}">
        <vws:CareerView/>
    </DataTemplate>

    <Style x:Key="MainHCCStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>

                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <!-- This template ensures that content of a HeaderedContentControl fills the available vertical space. -->
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <DockPanel>
                        <ContentPresenter 
                            DockPanel.Dock="Top"
                            ContentSource="Header" 
                            ContentTemplate="{TemplateBinding HeaderTemplate}" 
                        />
                        <ContentPresenter 
                            ContentSource="Content" 
                            ContentTemplate="{TemplateBinding ContentTemplate}" 
                        />
                    </DockPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- This style ensures that the borders in the main window are consistent. -->
    <Style x:Key="MainBorderStyle" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="WhiteSmoke" />
        <Setter Property="BorderBrush" Value="LightGray" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!-- Side menu styles and templates -->
    <Style x:Key="ExpandablePanelStyle" TargetType="{x:Type StackPanel}">
        <Setter Property="Visibility" Value="{Binding CollapsedProperty}" />
        <Setter Property="RenderTransformOrigin" Value="0.5,0" />
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleY="1" />
            </Setter.Value>
        </Setter>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsCollapsed}" Value="False">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" From="0" To="1" Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetProperty="RenderTransform.ScaleY" From="1" To="0" Duration="0:0:0.1" />
                        </Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="SubmenuItemTemplate" DataType="{x:Type Button}">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="6,2">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Button Content="{Binding Title}" Command="{Binding OpenViewCommand}" Margin="12,5,-2,5" Background="LightBlue">
                        <Button.Resources>
                            <Style TargetType="Border">
                                <Setter Property="CornerRadius" Value="5"/>
                                <Setter Property="BorderThickness" Value="1" />
                                <Setter Property="BorderBrush" Value="#FF0888FF" />
                            </Style>
                            <Style TargetType="Button">
                                <Setter Property="Padding" Value="1.75" />
                                <Setter Property="FontSize" Value="12" />
                                <Setter Property="FontWeight" Value="Medium" />
                                
                                <!-- Animation of the button - transforming to the left-->
                                <Setter Property="RenderTransform">
                                    <Setter.Value>
                                        <TranslateTransform X="0" Y="0" />
                                    </Setter.Value>
                                </Setter>
                                
                                <Style.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Trigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="(RenderTransform).(TranslateTransform.X)" To="-4" Duration="0:0:0.15" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation Storyboard.TargetProperty="(RenderTransform).(TranslateTransform.X)" To="0" Duration="0:0:0.15" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </Style.Triggers>
                                <!-- End of the animation -->
                            </Style>
                        </Button.Resources>
                    </Button>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <DataTemplate x:Key="CommandsTemplate">
        <ItemsControl IsTabStop="False" ItemsSource="{Binding}" Margin="0,2">
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <StackPanel Margin="0">
                        <Button Content="{Binding Path=CategoryTitle}" Command="{Binding Path=CollapseCommand}" Margin="0,13,0,0">
                            <Button.Style>
                                <Style TargetType="Button">
                                    <Setter Property="Padding" Value="2.5" />
                                    <Setter Property="FontSize" Value="16" />
                                    <Setter Property="Foreground" Value="WhiteSmoke" />
                                    <Setter Property="FontWeight" Value="Medium" />
                                    <Setter Property="Background" Value="CornflowerBlue" />
                                    <Setter Property="BorderThickness" Value="1" />
                                    <Setter Property="BorderBrush" Value="#FF0888FF" />

                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="Button">
                                                <Border Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="5">
                                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" Content="{TemplateBinding Content}" />
                                                </Border>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>

                                    <Style.Triggers>
                                        <Trigger Property="IsMouseOver" Value="True">
                                            <Setter Property="Background" Value="#FF8DB5FD" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </Button.Style>
                        </Button>
                        <StackPanel Style="{StaticResource ExpandablePanelStyle}" Height="Auto" DataContext="{Binding}" Margin="0">
                            <ContentControl ContentTemplate="{StaticResource SubmenuItemTemplate}" Content="{Binding SubmenuItems}" />
                        </StackPanel>
                    </StackPanel>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </DataTemplate>

    <!-- This template explains how to render a tab item with a close button. -->
    <DataTemplate x:Key="ClosableTabItemTemplate">
        <DockPanel Width="120">
            <Button 
                Command="{Binding Path=CloseCommand}"
                Content="X"
                Cursor="Hand"
                DockPanel.Dock="Right"
                Focusable="False"
                FontFamily="Courier" 
                FontSize="9"
                FontWeight="Bold"  
                Margin="0,1,0,0"
                Padding="0"
                VerticalContentAlignment="Bottom"
                Width="16" Height="16" 
            />
            <ContentPresenter 
                Content="{Binding Path=DisplayName}" 
                VerticalAlignment="Center" 
            />
        </DockPanel>
    </DataTemplate>

    <!-- his template explains how to render the 'Workspace' content area in the main window. -->
    <DataTemplate x:Key="WorkspacesTemplate">
        <TabControl 
            IsSynchronizedWithCurrentItem="True" 
            ItemsSource="{Binding}" 
            ItemTemplate="{StaticResource ClosableTabItemTemplate}"
            Margin="4"
        />
    </DataTemplate>
</ResourceDictionary>